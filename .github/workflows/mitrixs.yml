
name: MiTrixs

on:
  workflow_dispatch:
    inputs:
      ts_tailnet:
        description: "Tailscale tailnet (default: from secrets)"
        required: false
      ts_api_key:
        description: "Tailscale API key (default: from secrets)"
        required: false
      ts_authkey:
        description: "Tailscale auth key (default: from secrets)"
        required: false
      gh_api_token:
        description: "GitHub Personal Access Token (default: from secrets)"
        required: false
      test_mode:
        description: "Run 5-minute test loop"
        type: boolean
        default: false
      runtime_minutes:
        description: "Runtime in minutes (max 360; capped to 355)"
        required: false
        default: "355"
      loops:
        description: "How many handoffs (0 = infinite)"
        required: false
        default: "0"

concurrency:
  group: tailscale-rdp-singleton
  cancel-in-progress: false

permissions:
  contents: read
  actions: write

defaults:
  run:
    shell: pwsh

env:
  RDP_USER: mitrixs
  RDP_PASS: MTrixs@12345
  TS_HOSTNAME: MiTrixs

jobs:
  rdp:
    runs-on: windows-latest
    timeout-minutes: 355
    steps:
      - name: üîß Resolve inputs (with defaults from secrets)
        id: cfg
        env:
          RAW_TAILNET: ${{ inputs.ts_tailnet || secrets.TS_TAILNET }}
          RAW_APIKEY:  ${{ inputs.ts_api_key || secrets.TS_API_KEY }}
          RAW_AUTHKEY: ${{ inputs.ts_authkey || secrets.TS_AUTHKEY }}
          RAW_PAT:     ${{ inputs.gh_api_token || secrets.GH_API_TOKEN }}
          RAW_TEST:    ${{ inputs.test_mode == true && 'true' || 'false' }}
          RAW_RUNTIME: ${{ inputs.runtime_minutes || '355' }}
          RAW_LOOPS:   ${{ inputs.loops || '0' }}
        run: |
          function ToIntOr($v, $def){ if("$v" -match '^\d+$'){[int]$v}else{[int]$def} }

          $tailnet = $env:RAW_TAILNET
          $apiKey  = $env:RAW_APIKEY
          $authKey = $env:RAW_AUTHKEY
          $pat     = $env:RAW_PAT
          if (-not $tailnet -or -not $apiKey -or -not $authKey -or -not $pat) {
            Write-Error "Missing required inputs/secrets"; exit 1
          }

          $isTest = ($env:RAW_TEST -match '^(?i:true|1|yes|on)$')
          $runtime = ToIntOr $env:RAW_RUNTIME 355
          if ($isTest) { $runtime = 5 }
          if (-not $isTest -and $runtime -lt 6) { $runtime = 355 }
          if ($runtime -gt 360) { $runtime = 355 }
          $loops = ToIntOr $env:RAW_LOOPS 0
          if ($loops -lt 0) { $loops = 0 }

          "tailnet=$tailnet" | Out-File -Append $env:GITHUB_OUTPUT
          "apikey=$apiKey"   | Out-File -Append $env:GITHUB_OUTPUT
          "authkey=$authKey" | Out-File -Append $env:GITHUB_OUTPUT
          "pat=$pat"         | Out-File -Append $env:GITHUB_OUTPUT
          "runtime=$runtime" | Out-File -Append $env:GITHUB_OUTPUT
          "loops=$loops"     | Out-File -Append $env:GITHUB_OUTPUT
          Write-Host "Resolved: test=$isTest, runtime=$runtime, loops=$loops"

      - name: ‚öôÔ∏è Install Tailscale (if missing) & show version
        run: |
          $exe = "C:\Program Files\Tailscale\tailscale.exe"
          if (-not (Test-Path $exe)) {
            $dst = "$env:TEMP\tailscale-setup.exe"
            if (-not (Test-Path $dst)) {
              Invoke-WebRequest -Uri 'https://pkgs.tailscale.com/stable/tailscale-setup-latest.exe' -OutFile $dst
            }
            Start-Process -FilePath $dst -ArgumentList "/quiet" -Wait
          }
          Start-Service Tailscale -ErrorAction SilentlyContinue
          & "C:\Program Files\Tailscale\tailscale.exe" version

      - name: ‚öôÔ∏è Install WinRAR silently
        run: |
          $exe = "C:\Program Files\WinRAR\WinRAR.exe"
          if (-not (Test-Path $exe)) {
            $dst = "$env:TEMP\winrar.exe"
            [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
            $url = "https://www.rarlab.com/rar/winrar-x64-611.exe"

            $success = $false
            for ($i=0; $i -lt 3 -and -not $success; $i++) {
              try {
                Invoke-WebRequest -Uri $url -OutFile $dst -UseBasicParsing
                if ((Get-Item $dst).Length -gt 1000000) {
                  $success = $true
                } else {
                  Write-Host "Download too small, retrying..."
                  Remove-Item $dst -Force
                  Start-Sleep -Seconds 3
                }
              } catch {
                Write-Host "Download failed, retrying... ($i)"
                Start-Sleep -Seconds 3
              }
            }

            if (-not $success) {
              Write-Error "Failed to download WinRAR after 3 attempts."
              exit 1
            }

            Start-Process -FilePath $dst -ArgumentList "/S" -Wait
          }
          & "C:\Program Files\WinRAR\WinRAR.exe" /VER

      - name: ‚öôÔ∏è Setup browsers with extensions and open tabs
        shell: pwsh
        run: |
          $chrome = "C:\Program Files\Google\Chrome\Application\chrome.exe"
          $firefox = "C:\Program Files\Mozilla Firefox\firefox.exe"
          $tempDir = "$env:TEMP\browser-setup"
          New-Item -ItemType Directory -Path $tempDir -Force | Out-Null

          $chromeExtensions = @(
            "https://clients2.google.com/service/update2/crx?response=redirect&prodversion=114.0&x=id%3Diapifmceeokikomajpccajhjpacjmibe%26installsource%3Dondemand%26uc",
            "https://clients2.google.com/service/update2/crx?response=redirect&prodversion=114.0&x=id%3Dbgnkhhnnamicmpeenaelnjfhikgbkllg%26installsource%3Dondemand%26uc"
          )
          foreach ($ext in $chromeExtensions) {
            $fileName = Join-Path $tempDir ([System.IO.Path]::GetRandomFileName() + ".crx")
            Invoke-WebRequest -Uri $ext -OutFile $fileName -UseBasicParsing
            if (Test-Path $chrome) {
              Start-Process -FilePath $chrome -ArgumentList "--install-extension=$fileName" -Wait
            } else {
              Write-Host "Chrome not found, skipping extension install for $fileName"
            }
          }

          $firefoxProfiles = Get-ChildItem "$env:APPDATA\Mozilla\Firefox\Profiles" -ErrorAction SilentlyContinue | Where-Object { $_.PSIsContainer }
          if ($firefoxProfiles) {
            $firefoxProfile = $firefoxProfiles | Select-Object -First 1
            $firefoxExtension = "https://addons.mozilla.org/firefox/downloads/file/4241283/adguard_adblocker-latest.xpi"
            $xpiFile = Join-Path $tempDir "adguard.xpi"
            Invoke-WebRequest -Uri $firefoxExtension -OutFile $xpiFile -UseBasicParsing
            Copy-Item $xpiFile -Destination $firefoxProfile.FullName -Force
          } else {
            Write-Host "Firefox profile not found; extension copy skipped."
          }

          $tabs = "https://cloud.jazzdrive.com.pk/ https://moviesmod.org/ https://animephahe.ru/"
          if (Test-Path $chrome) {
            Start-Process -FilePath $chrome -ArgumentList $tabs
          }
          if (Test-Path $firefox) {
            Start-Process -FilePath $firefox -ArgumentList $tabs
          }

      - name: üîê Enable RDP user + firewall
        run: |
          $u="${{ env.RDP_USER }}"; $p="${{ env.RDP_PASS }}"
          $sec = ConvertTo-SecureString $p -AsPlainText -Force
          if (-not (Get-LocalUser -Name $u -ErrorAction SilentlyContinue)) {
            New-LocalUser -Name $u -Password $sec -AccountNeverExpires
            Add-LocalGroupMember -Group Administrators -Member $u
            Add-LocalGroupMember -Group "Remote Desktop Users" -Member $u
          } else {
            Set-LocalUser -Name $u -Password $sec -AccountNeverExpires
            Enable-LocalUser -Name $u
          }
          Set-ItemProperty "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name fDenyTSConnections -Value 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop" | Out-Null

      - name: üßπ PURGE any devices containing 'mitrixs' (startup)
        run: |
          $hdr = @{ Authorization = "Bearer ${{ steps.cfg.outputs.apikey }}" }
          $tn = [uri]::EscapeDataString("${{ steps.cfg.outputs.tailnet }}")
          $match = { param($d) ($d.name -match '(?i)mitrixs') -or ($d.hostname -match '(?i)mitrixs') -or ($d.DNSName -match '(?i)mitrixs') }
          try {
            $resp = Invoke-RestMethod -Method GET -Headers $hdr -Uri "https://api.tailscale.com/api/v2/tailnet/$tn/devices"
            foreach ($d in $resp.devices) {
              if (& $match $d) {
                try {
                  Invoke-RestMethod -Method DELETE -Headers $hdr -Uri ("https://api.tailscale.com/api/v2/device/{0}" -f $d.id) | Out-Null
                  Write-Host "Deleted at start: $($d.name)"
                } catch {}
              }
            }
          } catch { Write-Warning "Startup purge failed: $_" }

      - name: üîó Tailscale up (hostname=mitrixs) + show IP/FQDN/DERP
        id: up
        run: |
          $ts = "C:\Program Files\Tailscale\tailscale.exe"
          & $ts logout | Out-Null
          & $ts up --authkey "${{ steps.cfg.outputs.authkey }}" --hostname "${{ env.TS_HOSTNAME }}" --accept-routes --accept-dns=false
          Start-Sleep -Seconds 2

          $ip4 = (& $ts ip -4 | Select-Object -First 1)
          $status = & $ts status --json | ConvertFrom-Json
          $fqdn = $status.Self.DNSName
          $derp = $status.Self.DERP
          "ip4=$ip4"   | Out-File -Append $env:GITHUB_OUTPUT
          "fqdn=$fqdn" | Out-File -Append $env:GITHUB_OUTPUT
          "derp=$derp" | Out-File -Append $env:GITHUB_OUTPUT

          "### RDP (A)`nHost: $env:TS_HOSTNAME`nIPv4: $ip4`nMagicDNS: $fqdn`nDERP: $derp`nUser: $env:RDP_USER`nPass: $env:RDP_PASS" | Out-File $env:GITHUB_STEP_SUMMARY -Append -Encoding utf8

      - name: ‚è≥ Keep alive
        run: |
          $mins=[int]"${{ steps.cfg.outputs.runtime }}"
          $end=(Get-Date).AddMinutes($mins)
          while((Get-Date) -lt $end){
            $left=[int]([math]::Ceiling(($end-(Get-Date)).TotalMinutes))
            Write-Host "RDP alive... ($left min left)"
            Start-Sleep -Seconds 60
          }

      - name: üßπ PURGE any devices containing 'mitrixs' (exit)
        if: always()
        run: |
          $hdr = @{ Authorization = "Bearer ${{ steps.cfg.outputs.apikey }}" }
          $tn = [uri]::EscapeDataString("${{ steps.cfg.outputs.tailnet }}")
          $match = { param($d) ($d.name -match '(?i)mitrixs') -or ($d.hostname -match '(?i)mitrixs') -or ($d.DNSName -match '(?i)mitrixs') }
          try {
            $resp = Invoke-RestMethod -Method GET -Headers $hdr -Uri "https://api.tailscale.com/api/v2/tailnet/$tn/devices"
            foreach ($d in $resp.devices) {
              if (& $match $d) {
                try {
                  Invoke-RestMethod -Method DELETE -Headers $hdr -Uri ("https://api.tailscale.com/api/v2/device/{0}" -f $d.id) | Out-Null
                  Write-Host "Deleted at exit: $($d.name)"
                } catch {}
              }
            }
          } catch { Write-Warning "Exit purge failed: $_" }
